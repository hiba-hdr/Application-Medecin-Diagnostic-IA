// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TP_InterfaceWeb.Models;

#nullable disable

namespace TP_InterfaceWeb.Migrations
{
    [DbContext(typeof(MedecinDbContext))]
    [Migration("20220418150119_CreateDatabaseMedecin")]
    partial class CreateDatabaseMedecin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TP_InterfaceWeb.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountNewAccountID")
                        .HasColumnType("int");

                    b.Property<bool?>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountRoleId");

                    b.HasIndex("AccountNewAccountID");

                    b.HasIndex("RoleId");

                    b.ToTable("Account_Role");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.AjoutPatient", b =>
                {
                    b.Property<int>("AjoutPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DateNaissance")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("DernierDiagnostic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FemmeCheck")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HommeCheck")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AjoutPatientId");

                    b.ToTable("AjoutPatients");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.Diagnostic", b =>
                {
                    b.Property<int>("DiagnosticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DS")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NG")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Resultat")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Thalassemie")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("TypeDouleur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DiagnosticId");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.Medecin", b =>
                {
                    b.Property<int>("MedecinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MultiView1")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MedecinID");

                    b.ToTable("Medecins");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.NewAccount", b =>
                {
                    b.Property<int>("NewAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DateEntree")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateNaissance")
                        .HasColumnType("longtext");

                    b.Property<string>("FemmeCheck")
                        .HasColumnType("longtext");

                    b.Property<string>("HommeCheck")
                        .HasColumnType("longtext");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NewAccountID");

                    b.ToTable("NewAccount");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.AccountRole", b =>
                {
                    b.HasOne("TP_InterfaceWeb.Models.NewAccount", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountNewAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TP_InterfaceWeb.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.NewAccount", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("TP_InterfaceWeb.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
